// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PoolBrackets_backend_dotnet.Data;

#nullable disable

namespace PoolBrackets_backend_dotnet.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250308163012_AddPlayerHistory")]
    partial class AddPlayerHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("PoolBrackets_backend_dotnet.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date");

                    b.Property<bool>("IsHappen")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_happen");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<string>("Venue")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("venue");

                    b.HasKey("Id");

                    b.ToTable("events");
                });

            modelBuilder.Entity("PoolBrackets_backend_dotnet.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<int>("FirstPlayerId")
                        .HasColumnType("int")
                        .HasColumnName("first_player_id");

                    b.Property<int>("FirstPlayerPoint")
                        .HasColumnType("int")
                        .HasColumnName("first_player_point");

                    b.Property<bool>("IsFinish")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_finish");

                    b.Property<int>("SecondPlayerId")
                        .HasColumnType("int")
                        .HasColumnName("second_player_id");

                    b.Property<int>("SecondPlayerPoint")
                        .HasColumnType("int")
                        .HasColumnName("second_player_point");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("table");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("FirstPlayerId");

                    b.HasIndex("SecondPlayerId");

                    b.ToTable("matches");
                });

            modelBuilder.Entity("PoolBrackets_backend_dotnet.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Nation")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("nation");

                    b.Property<string>("Point")
                        .HasColumnType("longtext")
                        .HasColumnName("point");

                    b.Property<string>("Portrait")
                        .HasColumnType("longtext")
                        .HasColumnName("portrait");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.HasKey("Id");

                    b.ToTable("players");
                });

            modelBuilder.Entity("PoolBrackets_backend_dotnet.Models.PlayerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EventId")
                        .HasColumnType("int")
                        .HasColumnName("event_id");

                    b.Property<int?>("GroupStageTotal")
                        .HasColumnType("int")
                        .HasColumnName("group_stage_total");

                    b.Property<int?>("GroupStageWin")
                        .HasColumnType("int")
                        .HasColumnName("group_stage_win");

                    b.Property<int?>("KnockoutStageTotal")
                        .HasColumnType("int")
                        .HasColumnName("knockout_stage_total");

                    b.Property<int?>("KnockoutStageWin")
                        .HasColumnType("int")
                        .HasColumnName("knockout_stage_win");

                    b.Property<int>("PlayerId")
                        .HasColumnType("int")
                        .HasColumnName("player_id");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PlayerId");

                    b.ToTable("player_history");
                });

            modelBuilder.Entity("PoolBrackets_backend_dotnet.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("create_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("update_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PoolBrackets_backend_dotnet.Models.Match", b =>
                {
                    b.HasOne("PoolBrackets_backend_dotnet.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoolBrackets_backend_dotnet.Models.Player", "FirstPlayer")
                        .WithMany()
                        .HasForeignKey("FirstPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PoolBrackets_backend_dotnet.Models.Player", "SecondPlayer")
                        .WithMany()
                        .HasForeignKey("SecondPlayerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("FirstPlayer");

                    b.Navigation("SecondPlayer");
                });

            modelBuilder.Entity("PoolBrackets_backend_dotnet.Models.PlayerHistory", b =>
                {
                    b.HasOne("PoolBrackets_backend_dotnet.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoolBrackets_backend_dotnet.Models.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Player");
                });
#pragma warning restore 612, 618
        }
    }
}
